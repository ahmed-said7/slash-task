// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userType {
  admin
  user
  manager
}
enum orderType {
  paid
  pending
  cancelled
}

model user {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role userType? @default(user)
  cart cart?
  orders order[]
}

model product {
  id Int @id @default(autoincrement())
  price Float
  name String
  description String
  stock Int
  cart cart_items[]
  ordered order_items[]
}

model coupon {
  id Int @id @default(autoincrement())
  name String @unique
  couponExpiresIn DateTime 
  discount Int
}

model cart {
  id Int @id @default(autoincrement())
  price Float
  priceAfterDiscount Float?
  userId Int @unique
  user user @relation(fields: [userId],references: [id])
  items cart_items[]
}

model cart_items {
  id Int @id @default(autoincrement())
  cartId Int
  cart cart @relation(fields: [cartId],references: [id],onDelete: Cascade)
  productId Int
  product product @relation(fields: [productId],references: [id],onDelete: Cascade)
  quantity Int @default(1)
  @@unique([cartId,productId])
}

model user_coupon {
  id Int @id @default(autoincrement())
  userId Int
  couponId Int
}

model order {
  id Int @id @default(autoincrement())
  userId Int
  user user @relation(fields: [userId],references: [id])
  price Float
  items order_items[]
  createdAt DateTime @default(now())
  status orderType? @default(pending)
}


model order_items {
  id Int @id @default(autoincrement())
  orderId Int
  order order @relation(fields: [orderId],references: [id])
  productId Int
  product product @relation(fields: [productId],references: [id])
  quantity Int @default(1)
}